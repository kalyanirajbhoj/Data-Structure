   #include<bits/stdc++.h>
   using namespace std;
   
   struct node
   {
      int data;
      struct node* next;
   };
   node* newnode(int key)
   {
     struct node* temp = new node;
     temp->data = key;
     temp->next =nullptr;
     return temp;
   }
   node* merged_linkedlist(node* head1, node* head2)
   {
   if (head1 == nullptr) {
     return head2;
   } else if (head2 == nullptr) {
    return head1;
   }
   node* newhead = nullptr;
   
   if (head1->data <= head2->data) {
     newhead = head1;
     head1 = head1->next;
   } else {
     newhead = head2;
     head2 = head2->next; 
   }
   node* temphead = newhead;
   while (head1 != nullptr && head2 != nullptr) {
     node* temp = nullptr;
     if (head1->data <= head2->data) {
       temp = head1;
       head1 = head1->next;
     } else {
       temp = head2;
       head2 = head2->next;
     }
     temphead->next = temp;
     temphead = temp;
   }
  
   if (head1 != nullptr) {
     temphead->next = head1;
   } else if (head2 != nullptr) {
     temphead->next = head2;
   }
   return newhead;
 }
   void display(node* node1)
   {
   
    while (node1 != nullptr) {
        cout<<node1->data<<" ";
        node1 = node1->next;
    }
    cout<<endl;
   }
   int main()
  {  
    node* head1 = newnode(1);
    head1->next = newnode(2);
    head1->next->next = newnode(3);
    head1->next->next->next = newnode(4);
    head1->next->next->next->next = newnode(5);
    
    cout<<"linked list 1 : ";
    display(head1);
   
    node* head2 = newnode(3);
    head2->next = newnode(4);
    head2->next->next = newnode(6);
    head1->next->next->next = newnode(8);
    head1->next->next->next->next = newnode(9);
    head1->next->next->next->next->next = newnode(10);
 
    cout<<"linked list 2 : ";
    display(head2);
 
    node* head = merged_linkedlist(head1, head2);
    cout<<"merged linked list : ";
    display(head);
    return 0;
  }
